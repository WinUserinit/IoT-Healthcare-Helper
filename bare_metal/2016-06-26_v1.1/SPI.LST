C51 COMPILER V9.51   SPI                                                                   06/26/2015 13:32:25 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE SPI
OBJECT MODULE PLACED IN SPI.OBJ
COMPILER INVOKED BY: c:\keil\C51\BIN\C51.exe SPI.c DB OE LARGE CD

line level    source

   1          //-----------------------------------------------------------------------------
   2          // SPI.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014
   5          //
   6          // Program Description:
   7          //
   8          // Source file for SMBus Interrupt Service Routine and supporting functions.
   9          //
  10          //
  11          // FID:            
  12          // Target:         C8051F32x/C8051F340
  13          // Tool chain:     Keil C51 7.50 / Keil EVAL C51
  14          //                 Silicon Laboratories IDE version 2.6
  15          // Project Name:   generic
  16          //
  17          //
  18          // Release 1.0
  19          //              -140401 Initial Revision (Tushar Mazumder)
  20          //
  21          // Other than bug fixes or implementation changes, this file should not need to be updated.
  22          
  23          #include "c8051f3xx.h"
  24          #include "F3xx_USB0_Descriptor.h"
*** MESSAGE C286 IN LINE 169 OF ProjectDefines.h: writeReadHID() EP3OUT 256-byte buffer
*** MESSAGE C286 IN LINE 170 OF ProjectDefines.h: writeReadHID() EP3IN 256-byte buffer
*** MESSAGE C286 IN LINE 171 OF ProjectDefines.h: USB_EP_INDEX 3 for EP_STATUS[USB_EP_INDEX] and POLL_WRITE_BYTE (INDEX,
             - USB_EP_INDEX);
  25          #include "F3xx_Initialize.h"
  26          
  27          #if SUPPORT_SPI
              
              extern uint8_t gOffset;
              sbit MISO = P0^1;
              
              //void T0_Wait_ms (uint16_t);
              void SPI_generic(uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t*);
              
              void SPI_mode0(uint8_t phase_change, uint8_t phase_change_byte, uint8_t num_bytes, uint8_t *dataPtr)
              {
                      // const uint8_t phase_change = phase_change; // !=0 enable changing the clock phase. some slaves change 
             -phase between write/read
                      // const uint8_t phase_change_byte = phase_change_byte; // byte index where phase change should happen
                      // const uint8_t toggleClock = 0; // !=0 change phase between write/read, providing an extra clock for sl
             -ave to send data before the master starts sampling
                      // const uint8_t sampleMISO = 0; // !=0 discard the MSb on the second byte read, and then sample the LSb 
             -after the read
                      // const uint8_t num_bytes = num_bytes;
                      // const uint8_t *dataPtr = dataPtr;
                      // SPI_generic(phase_change, phase_change_byte, toggleClock, sampleMISO, num_bytes, dataPtr); 
                      SPI_generic(phase_change, phase_change_byte, 0, 0, num_bytes, dataPtr);
              }
              
              void SPI_mode1(uint8_t read, uint8_t *dataPtr)
              {
C51 COMPILER V9.51   SPI                                                                   06/26/2015 13:32:25 PAGE 2   

                      // two-byte SPI transfer. read flag: enable changing the clock phase on first byte and changing phase bet
             -ween first and second byte
                      // const uint8_t phase_change = read; // !=0 enable changing the clock phase. some slaves change phase be
             -tween write/read
                      // const uint8_t phase_change_byte = 0; // byte index where phase change should happen
                      // const uint8_t toggleClock = read; // !=0 change phase between write/read, providing an extra clock for
             - slave to send data before the master starts sampling
                      // const uint8_t sampleMISO = 0;
                      // const uint8_t num_bytes = 2;
                      // const uint8_t *dataPtr = dataPtr;
                      // SPI_generic(phase_change, phase_change_byte, toggleClock, sampleMISO, num_bytes, dataPtr);
                      SPI_generic(read, 0, read, 0, 2, dataPtr);
              }
              
              void SPI_mode2(uint8_t read, uint8_t *dataPtr)
              {
                      // two-byte SPI transfer. read flag: enable changing the clock phase on first byte and sampling the LSb a
             -fter the second byte read
                      // const uint8_t phase_change = read; // !=0 enable changing the clock phase. some slaves change phase be
             -tween write/read
                      // const uint8_t phase_change_byte = 0; // byte index where phase change should happen
                      // const uint8_t toggleClock = 0;
                      // const uint8_t sampleMISO = read; // !=0 discard the MSb on the second byte read, and then sample the L
             -Sb after the read
                      // const uint8_t num_bytes = 2;
                      // const uint8_t *dataPtr = dataPtr;
                      // SPI_generic(phase_change, phase_change_byte, toggleClock, sampleMISO, num_bytes, dataPtr);
                      SPI_generic(read, 0, 0, read, 2, dataPtr);
              }
              
              void SPI_generic(uint8_t phase_change, uint8_t phase_change_byte, uint8_t toggleClock, uint8_t sampleMISO,
             - uint8_t num_bytes, uint8_t *dataPtr)
              // phase change, toggleClock, sampleMISO will only be '1' if a read
              {
                      uint8_t i;
                      uint8_t temp;
              
                      NSSMD0 = ~NSSMD0;
                      for (i=0 ; i<num_bytes ; i++)
                      {
                              SPI0DAT = *(dataPtr + gOffset + 6 + i);  // data starts on the (7 + offset) byte
                              while (!(SPI0CN & 0x80));       //wait until interrupt flag is cleared to signal end of transfer
                              SPI0CN &= 0x7F;                         //clear interrupt flag
              
                              // some slaves change phase between write/read but need an extra clock to send data before the master st
             -arts sampling
                              // toggle CKPOL to create the extra clock
                              // this assumes a two byte SPI command
                              if (toggleClock && i == 0)      
                              {
                                      (SPI0CFG & 0x10) ? (SPI0CFG &= 0xEF) : (SPI0CFG |= 0x10);
                                      //T0_Wait_ms(10);
                                      (SPI0CFG & 0x10) ? (SPI0CFG &= 0xEF) : (SPI0CFG |= 0x10);
                              }
              
                              if (phase_change && i == phase_change_byte)
                              {
                                      (SPI0CFG & 0x20) ? (SPI0CFG &= 0xDF) : (SPI0CFG |= 0x20);       // toggle clock phase   
                              }
              
                              *(dataPtr + gOffset + 1 + i) = SPI0DAT; // read SPI0DAT on every write, since we don't know when real da
             -ta is expected to be read
C51 COMPILER V9.51   SPI                                                                   06/26/2015 13:32:25 PAGE 3   

              
                              // some slaves change phase between write/read and need an extra clock to send data before the master st
             -arts sampling, but don't allow the latching edge on the last bit!
                              // don't send an extra clock between bytes, but rather discard the MSb on the read, and then sample the 
             -LSb after the read
                              // this assumes a two byte SPI command
                              if (sampleMISO && i == 1)
                              {
                                      temp = ((*(dataPtr + gOffset + 1 + i)) << 1) | MISO;
                                      *(dataPtr + gOffset + 1 + i) = temp;
                              }
                      }
                      if (phase_change)       // restore original clock phase
                      {
                              (SPI0CFG & 0x20) ? (SPI0CFG &= 0xDF) : (SPI0CFG |= 0x20);
                      }
                      NSSMD0 = ~NSSMD0;
                      *dataPtr = SHORT_REPORT_ID; // HID_REPORT_ID_1
                      *(dataPtr + gOffset) = 0;       // status
              }
              
              #endif // SUPPORT_SPI
 122          
C51 COMPILER V9.51   SPI                                                                   06/26/2015 13:32:25 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
